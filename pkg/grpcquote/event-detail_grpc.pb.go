// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcQuote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EventDetailServiceGRPCClient is the client API for EventDetailServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventDetailServiceGRPCClient interface {
	GetEventDetail(ctx context.Context, in *EventDetailRequest, opts ...grpc.CallOption) (*EventDetailReply, error)
	UpdateEventDetail(ctx context.Context, in *EventDetailUpdateRequest, opts ...grpc.CallOption) (*EventDetailUpdateReply, error)
	GetEventDetailStream(ctx context.Context, opts ...grpc.CallOption) (EventDetailServiceGRPC_GetEventDetailStreamClient, error)
}

type eventDetailServiceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewEventDetailServiceGRPCClient(cc grpc.ClientConnInterface) EventDetailServiceGRPCClient {
	return &eventDetailServiceGRPCClient{cc}
}

func (c *eventDetailServiceGRPCClient) GetEventDetail(ctx context.Context, in *EventDetailRequest, opts ...grpc.CallOption) (*EventDetailReply, error) {
	out := new(EventDetailReply)
	err := c.cc.Invoke(ctx, "/grpcQuote.EventDetailServiceGRPC/GetEventDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventDetailServiceGRPCClient) UpdateEventDetail(ctx context.Context, in *EventDetailUpdateRequest, opts ...grpc.CallOption) (*EventDetailUpdateReply, error) {
	out := new(EventDetailUpdateReply)
	err := c.cc.Invoke(ctx, "/grpcQuote.EventDetailServiceGRPC/UpdateEventDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventDetailServiceGRPCClient) GetEventDetailStream(ctx context.Context, opts ...grpc.CallOption) (EventDetailServiceGRPC_GetEventDetailStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventDetailServiceGRPC_serviceDesc.Streams[0], "/grpcQuote.EventDetailServiceGRPC/GetEventDetailStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventDetailServiceGRPCGetEventDetailStreamClient{stream}
	return x, nil
}

type EventDetailServiceGRPC_GetEventDetailStreamClient interface {
	Send(*EventDetailRequest) error
	Recv() (*EventDetailReply, error)
	grpc.ClientStream
}

type eventDetailServiceGRPCGetEventDetailStreamClient struct {
	grpc.ClientStream
}

func (x *eventDetailServiceGRPCGetEventDetailStreamClient) Send(m *EventDetailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventDetailServiceGRPCGetEventDetailStreamClient) Recv() (*EventDetailReply, error) {
	m := new(EventDetailReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventDetailServiceGRPCServer is the server API for EventDetailServiceGRPC service.
// All implementations must embed UnimplementedEventDetailServiceGRPCServer
// for forward compatibility
type EventDetailServiceGRPCServer interface {
	GetEventDetail(context.Context, *EventDetailRequest) (*EventDetailReply, error)
	UpdateEventDetail(context.Context, *EventDetailUpdateRequest) (*EventDetailUpdateReply, error)
	GetEventDetailStream(EventDetailServiceGRPC_GetEventDetailStreamServer) error
}

// UnimplementedEventDetailServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedEventDetailServiceGRPCServer struct {
}

func (UnimplementedEventDetailServiceGRPCServer) GetEventDetail(context.Context, *EventDetailRequest) (*EventDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventDetail not implemented")
}
func (UnimplementedEventDetailServiceGRPCServer) UpdateEventDetail(context.Context, *EventDetailUpdateRequest) (*EventDetailUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventDetail not implemented")
}
func (UnimplementedEventDetailServiceGRPCServer) GetEventDetailStream(EventDetailServiceGRPC_GetEventDetailStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventDetailStream not implemented")
}
func (UnimplementedEventDetailServiceGRPCServer) mustEmbedUnimplementedEventDetailServiceGRPCServer() {
}

// UnsafeEventDetailServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventDetailServiceGRPCServer will
// result in compilation errors.
type UnsafeEventDetailServiceGRPCServer interface {
	mustEmbedUnimplementedEventDetailServiceGRPCServer()
}

func RegisterEventDetailServiceGRPCServer(s grpc.ServiceRegistrar, srv EventDetailServiceGRPCServer) {
	s.RegisterService(&_EventDetailServiceGRPC_serviceDesc, srv)
}

func _EventDetailServiceGRPC_GetEventDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventDetailServiceGRPCServer).GetEventDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcQuote.EventDetailServiceGRPC/GetEventDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventDetailServiceGRPCServer).GetEventDetail(ctx, req.(*EventDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventDetailServiceGRPC_UpdateEventDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventDetailUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventDetailServiceGRPCServer).UpdateEventDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcQuote.EventDetailServiceGRPC/UpdateEventDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventDetailServiceGRPCServer).UpdateEventDetail(ctx, req.(*EventDetailUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventDetailServiceGRPC_GetEventDetailStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventDetailServiceGRPCServer).GetEventDetailStream(&eventDetailServiceGRPCGetEventDetailStreamServer{stream})
}

type EventDetailServiceGRPC_GetEventDetailStreamServer interface {
	Send(*EventDetailReply) error
	Recv() (*EventDetailRequest, error)
	grpc.ServerStream
}

type eventDetailServiceGRPCGetEventDetailStreamServer struct {
	grpc.ServerStream
}

func (x *eventDetailServiceGRPCGetEventDetailStreamServer) Send(m *EventDetailReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventDetailServiceGRPCGetEventDetailStreamServer) Recv() (*EventDetailRequest, error) {
	m := new(EventDetailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventDetailServiceGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcQuote.EventDetailServiceGRPC",
	HandlerType: (*EventDetailServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventDetail",
			Handler:    _EventDetailServiceGRPC_GetEventDetail_Handler,
		},
		{
			MethodName: "UpdateEventDetail",
			Handler:    _EventDetailServiceGRPC_UpdateEventDetail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventDetailStream",
			Handler:       _EventDetailServiceGRPC_GetEventDetailStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event-detail.proto",
}
