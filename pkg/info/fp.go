// Code generated by 'gofp'. DO NOT EDIT.
package info
import "sync" 

func Map(f func(Info) Info, list []Info) []Info {
	if f == nil {
		return []Info{}
	}
	newList := make([]Info, len(list))
	for i, v := range list {
		newList[i] = f(v)
	}
	return newList
}

func Filter(f func(Info) bool, list []Info) []Info {
	if f == nil {
		return []Info{}
	}
	var newList []Info
	for _, v := range list {
		if f(v) {
			newList = append(newList, v)
		}
	}
	return newList
}

func FilterPtr(f func(*Info) bool, list []*Info) []*Info {
	if f == nil {
		return []*Info{}
	}
	var newList []*Info
	for _, v := range list {
		if f(v) {
			newList = append(newList, v)
		}
	}
	return newList
}

func Remove(f func(Info) bool, list []Info) []Info {
	if f == nil {
		return []Info{}
	}
	var newList []Info
	for _, v := range list {
		if !f(v) {
			newList = append(newList, v)
		}
	}
	return newList
}

func Some(f func(Info) bool, list []Info) bool {
	if f == nil {
		return false
	}
	for _, v := range list {
		if f(v) {
			return true
		}
	}
	return false
}

func Every(f func(Info) bool, list []Info) bool {
	if f == nil || len(list) == 0 {
		return false
	}
	for _, v := range list {
		if !f(v) {
			return false
		}
	}
	return true
}

func DropWhile(f func(Info) bool, list []Info) []Info {
	if f == nil {
		return []Info{}
	}
	var newList []Info
	for i, v := range list {
		if !f(v) {
			listLen := len(list)
			newList = make([]Info, listLen-i)
			j := 0
			for i < listLen {
				newList[j] = list[i]
				i++
				j++
			}
			return newList
		}
	}
	return newList
}

func TakeWhile(f func(Info) bool, list []Info) []Info {
	if f == nil {
		return []Info{}
	}
	var newList []Info
	for _, v := range list {
		if !f(v) {
			return newList
		}
		newList = append(newList, v)
	}
	return newList
}

func PMap(f func(Info) Info, list []Info) []Info {
	if f == nil {
		return []Info{}
	}

	ch := make(chan map[int]Info)
	var wg sync.WaitGroup

	for i, v := range list {
		wg.Add(1)

		go func(wg *sync.WaitGroup, ch chan map[int]Info, i int, v Info) {
			defer wg.Done()
			ch <- map[int]Info{i: f(v)}
		}(&wg, ch, i, v)
	}

	go func() {
		wg.Wait()
		close(ch)
	}()

	newList := make([]Info, len(list))
	for m := range ch {
		for k, v := range m {
			newList[k] = v
		}
	}
	return newList
}

func FilterMap(fFilter func(Info) bool, fMap func(Info) Info, list []Info) []Info {
	if fFilter == nil || fMap == nil {
		return []Info{}
	}
	var newList []Info
	for _, v := range list {
		if fFilter(v) {
			newList = append(newList, fMap(v))
		}
	}
	return newList
}

func Rest(l []Info) []Info {
	if l == nil {
		return []Info{}
	}

	len := len(l)
	if len == 0 || len == 1 {
		return []Info{}
	}

	newList := make([]Info, len-1)

	for i, v := range l[1:] {
		newList[i] = v
	}

	return newList
}

func Reduce(f func(Info, Info) Info, list []Info, initializer ...Info) Info {
	var init Info 
	lenList := len(list)

	if initializer != nil {
		init = initializer[0]
	} else if lenList > 0 {
		init = list[0]
		if lenList == 1 {
			return list[0]
		}
		if lenList >= 2 {
			list = list[1:]
		}
	}
	
	if lenList == 0 {
		return init
	}
	r := f(init, list[0])
	return Reduce(f, list[1:], r)
}

// DropLast drops last item from the list and returns new list.
// Returns empty list if there is only one item in the list or list empty
func DropLast(list []Info) []Info {
	listLen := len(list)

	if list == nil || listLen == 0 || listLen == 1 {
		return []Info{}
	}

	newList := make([]Info, listLen-1)

	for i := 0; i < listLen-1; i++ {
		newList[i] = list[i]
	}
	return newList
}


